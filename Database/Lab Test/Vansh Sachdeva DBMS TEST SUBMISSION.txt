Question 1 Or Part:

Use MongoDB and perform the following operations 

i. Create a database called ‘CDACACTS’ 

test> use CDACACTS
switched to db CDACACTS
CDACACTS> 


ii. Create a collection called ‘Movies’ 

CDACACTS> db.createCollection("Movies")
{ ok: 1 }


iii. Insert   5   documents   into   the   above   create   collection   with   the   following 

properties: Id, Name, Category, Rating (out of 10) 

CDACACTS> db.Movies.insertMany([
...   { Id: 1, Name: "Inception", Category: "Sci-Fi", Rating: 9 },
...   { Id: 2, Name: "Finding Nemo", Category: "Animation", Rating: 8 },
...   { Id: 3, Name: "Interstellar", Category: "Sci-Fi", Rating: 9 },
...   { Id: 4, Name: "The Lion King", Category: "Animation", Rating: 7 },
...   { Id: 5, Name: "The Dark Knight", Category: "Action", Rating: 9 }
... ])
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('66f67c5b724363d3a4964033'),
    '1': ObjectId('66f67c5b724363d3a4964034'),
    '2': ObjectId('66f67c5b724363d3a4964035'),
    '3': ObjectId('66f67c5b724363d3a4964036'),
    '4': ObjectId('66f67c5b724363d3a4964037')
  }
}
CDACACTS> 


iv. Write a query to display all the movies 


CDACACTS> db.Movies.find().pretty()
[
  {
    _id: ObjectId('66f67c5b724363d3a4964033'),
    Id: 1,
    Name: 'Inception',
    Category: 'Sci-Fi',
    Rating: 9
  },
  {
    _id: ObjectId('66f67c5b724363d3a4964034'),
    Id: 2,
    Name: 'Finding Nemo',
    Category: 'Animation',
    Rating: 8
  },
  {
    _id: ObjectId('66f67c5b724363d3a4964035'),
    Id: 3,
    Name: 'Interstellar',
    Category: 'Sci-Fi',
    Rating: 9
  },
  {
    _id: ObjectId('66f67c5b724363d3a4964036'),
    Id: 4,
    Name: 'The Lion King',
    Category: 'Animation',
    Rating: 7
  },
  {
    _id: ObjectId('66f67c5b724363d3a4964037'),
    Id: 5,
    Name: 'The Dark Knight',
    Category: 'Action',
    Rating: 9
  }
]
CDACACTS> 


v. Write a query to return the 3 highest rated movies 

CDACACTS> db.Movies.find().sort({ Rating: -1 }).limit(3)
[
  {
    _id: ObjectId('66f67c5b724363d3a4964037'),
    Id: 5,
    Name: 'The Dark Knight',
    Category: 'Action',
    Rating: 9
  },
  {
    _id: ObjectId('66f67c5b724363d3a4964035'),
    Id: 3,
    Name: 'Interstellar',
    Category: 'Sci-Fi',
    Rating: 9
  },
  {
    _id: ObjectId('66f67c5b724363d3a4964033'),
    Id: 1,
    Name: 'Inception',
    Category: 'Sci-Fi',
    Rating: 9
  }
]
CDACACTS> 


vi. Write a query to returns only   movie names  

CDACACTS> db.Movies.find({}, { Name: 1, _id: 0 })
[
  { Name: 'Inception' },
  { Name: 'Finding Nemo' },
  { Name: 'Interstellar' },
  { Name: 'The Lion King' },
  { Name: 'The Dark Knight' }
]
CDACACTS> 


vii. Write   a   query   that   returns   all   the   movies   which   belong   to   the   category  “Animation” 
CDACACTS> db.Movies.find({ Category: "Animation" })
[
  {
    _id: ObjectId('66f67c5b724363d3a4964034'),
    Id: 2,
    Name: 'Finding Nemo',
    Category: 'Animation',
    Rating: 8
  },
  {
    _id: ObjectId('66f67c5b724363d3a4964036'),
    Id: 4,
    Name: 'The Lion King',
    Category: 'Animation',
    Rating: 7
  }
]
CDACACTS> 


viii. Write a query that returns only movies that has rating 

CDACACTS> db.Movies.find({ Rating: { $exists: true } })
[
  {
    _id: ObjectId('66f67c5b724363d3a4964033'),
    Id: 1,
    Name: 'Inception',
    Category: 'Sci-Fi',
    Rating: 9
  },
  {
    _id: ObjectId('66f67c5b724363d3a4964034'),
    Id: 2,
    Name: 'Finding Nemo',
    Category: 'Animation',
    Rating: 8
  },
  {
    _id: ObjectId('66f67c5b724363d3a4964035'),
    Id: 3,
    Name: 'Interstellar',
    Category: 'Sci-Fi',
    Rating: 9
  },
  {
    _id: ObjectId('66f67c5b724363d3a4964036'),
    Id: 4,
    Name: 'The Lion King',
    Category: 'Animation',
    Rating: 7
  },
  {
    _id: ObjectId('66f67c5b724363d3a4964037'),
    Id: 5,
    Name: 'The Dark Knight',
    Category: 'Action',
    Rating: 9
  }
]
CDACACTS> 


ix. Write a query that returns the details of only those movies whose Rating is more than 7 

CDACACTS> db.Movies.find({ Rating: { $gt: 7 } })
[
  {
    _id: ObjectId('66f67c5b724363d3a4964033'),
    Id: 1,
    Name: 'Inception',
    Category: 'Sci-Fi',
    Rating: 9
  },
  {
    _id: ObjectId('66f67c5b724363d3a4964034'),
    Id: 2,
    Name: 'Finding Nemo',
    Category: 'Animation',
    Rating: 8
  },
  {
    _id: ObjectId('66f67c5b724363d3a4964035'),
    Id: 3,
    Name: 'Interstellar',
    Category: 'Sci-Fi',
    Rating: 9
  },
  {
    _id: ObjectId('66f67c5b724363d3a4964037'),
    Id: 5,
    Name: 'The Dark Knight',
    Category: 'Action',
    Rating: 9
  }
]
CDACACTS> 


x. Write a query that returns the details of those movies which has a rating of more than 5 and belongs to category “Animation 
CDACACTS> db.Movies.find({ Rating: { $gt: 5 }, Category: "Animation" })
[
  {
    _id: ObjectId('66f67c5b724363d3a4964034'),
    Id: 2,
    Name: 'Finding Nemo',
    Category: 'Animation',
    Rating: 8
  },
  {
    _id: ObjectId('66f67c5b724363d3a4964036'),
    Id: 4,
    Name: 'The Lion King',
    Category: 'Animation',
    Rating: 7
  }
]


Write a query that returns the records of movies whose title has ‘R’  as the starting letter followed by ’e’ 

CDACACTS> db.Movies.find({ Name: { $regex: /^Re/ } })

CDACACTS> 


xii. Write a query to return the details of movies which has ‘a’ in the Name of movie 

CDACACTS> db.Movies.find({ Name: { $regex: /a/ } })
[
  {
    _id: ObjectId('66f67c5b724363d3a4964035'),
    Id: 3,
    Name: 'Interstellar',
    Category: 'Sci-Fi',
    Rating: 9
  },
  {
    _id: ObjectId('66f67c5b724363d3a4964037'),
    Id: 5,
    Name: 'The Dark Knight',
    Category: 'Action',
    Rating: 9
  }
]
CDACACTS> 

-- Question 2

(a). Insert data into the product table using the INSERT command. Include information such as product_id, name, price, code, initial stock quantity. 

cqlsh:cdac> INSERT INTO product (product_id, productCode, name, quantity, price,
 sales)
        ... VALUES (1001, 'PEN', 'Pen Red', 5000, 1.23, 20);
cqlsh:cdac>
cqlsh:cdac> INSERT INTO product (product_id, productCode, name, quantity, price,
 sales)
        ... VALUES (1002, 'PEN', 'Pen Blue', 8000, 1.25, 33);
cqlsh:cdac>
cqlsh:cdac> INSERT INTO product (product_id, productCode, name, quantity, price,
 sales)
        ... VALUES (1003, 'PEN', 'Pen Black', 2000, 1.25, 12);
cqlsh:cdac>
cqlsh:cdac> INSERT INTO product (product_id, productCode, name, quantity, price,
 sales)
        ... VALUES (1004, 'PEC', 'Pencil 2B', 10000, 0.48, 46);
cqlsh:cdac>
cqlsh:cdac> INSERT INTO product (product_id, productCode, name, quantity, price,
 sales)
        ... VALUES (1005, 'PEC', 'Pencil 2H', 8000, 0.49, 64);
cqlsh:cdac> select * from product;


(b) find the product whose price is max in the table as per their code. 

cqlsh:cdac> SELECT product_code, name, price
        ... FROM product
        ... WHERE price = (SELECT max(price) FROM product)
        ... ALLOW FILTERING;
[0;1;31mSyntaxException: <ErrorMessage code=2000 [Syntax error in CQL query] me
ssage="line 3:15 no viable alternative at input 'SELECT' (...FROM productWHERE p
rice = [(]SELECT...)">[0m

-- IMPORTANT NOTE: -no output shown as not a partition a key nor clustering column

( C) Update the price of the product to 200 Rs if product sales is below 15 pcs. 

UPDATE product
        ... SET price = 200
        ... WHERE product_id IN (
        ...     SELECT product_id
        ...     FROM product
        ...     WHERE sales < 15
        ... );
[0;1;31mSyntaxException: <ErrorMessage code=2000 [Syntax error in CQL query] me
ssage="line 4:4 mismatched input 'SELECT' expecting ')' (...200WHERE product_id 
IN (    [SELECT] product_id...)">[0m

-- IMPORTANT NOTE: -no output shown as not a partition a key nor clustering column


(d) add the city column in the product table in and fill the stock available in the quantity.  

cqlsh:cdac> ALTER TABLE product ADD city text;
cqlsh:cdac> UPDATE product
        ...                SET city = 'CityName'
        ...                WHERE product_id = 1001;
cqlsh:cdac> select * from product;

 [0;1;31mproduct_id[0m | [0;1;35mcity[0m     | [0;1;35mname[0m      | [0;
1;35mprice[0m | [0;1;35mproductcode[0m | [0;1;35mquantity[0m | [0;1;35msal
es[0m
------------+----------+-----------+-------+-------------+----------+-------
       [0;1;32m1004[0m |     [0;1;31mnull[0m | [0;1;33mPencil 2B[0m |  [0
;1;32m0.48[0m |         [0;1;33mPEC[0m |    [0;1;32m10000[0m |    [0;1;32m
46[0m
       [0;1;32m1005[0m |     [0;1;31mnull[0m | [0;1;33mPencil 2H[0m |  [0
;1;32m0.49[0m |         [0;1;33mPEC[0m |     [0;1;32m8000[0m |    [0;1;32m
64[0m
       [0;1;32m1001[0m | [0;1;33mCityName[0m |   [0;1;33mPen Red[0m |  [0
;1;32m1.23[0m |         [0;1;33mPEN[0m |     [0;1;32m5000[0m |    [0;1;32m
20[0m
       [0;1;32m1003[0m |     [0;1;31mnull[0m | [0;1;33mPen Black[0m |   [
0;1;32m200[0m |         [0;1;33mPEN[0m |     [0;1;32m2000[0m |    [0;1;32m
12[0m
       [0;1;32m1002[0m |     [0;1;31mnull[0m |  [0;1;33mPen Blue[0m |  [0
;1;32m1.25[0m |         [0;1;33mPEN[0m |     [0;1;32m8000[0m |    [0;1;32m
33[0m

(5 rows)


--- Question 3
Q3. Consider the following schemas in MySQL: 

  

                                                                 Table- Boats (bid, bname, color) 

                                                                                                                            Table- Reserves (sid, bid, day(date)) 
create database CDACACTS;
use CDACACTS;


-- Create the Sailors table
CREATE TABLE Sailors (
    sid INT PRIMARY KEY,
    sname VARCHAR(50),
    rating INT,
    age FLOAT
);

-- Insert values into the Sailors table
INSERT INTO Sailors (sid, sname, rating, age) VALUES
(22, 'Dustin', 7, 45),
(29, 'Brutus', 1, 33),
(31, 'Lubber', 8, 55.5),
(32, 'Andy', 8, 25.5),
(58, 'Rusty', 10, 35),
(64, 'Horatio', 7, 35),
(71, 'Zorba', 10, 16),
(74, 'Horatio', 9, 40),
(85, 'Art', 3, 25.5),
(95, 'Bob', 3, 63.5);

-- Create the Boats table
CREATE TABLE Boats (
    bid INT PRIMARY KEY,
    bname VARCHAR(50),
    color VARCHAR(20)
);

-- Insert values into the Boats table
INSERT INTO Boats (bid, bname, color) VALUES
(101, 'Interlake', 'blue'),
(102, 'Interlake', 'red'),
(103, 'Clipper', 'green'),
(104, 'Marine', 'red');

-- Create the Reserves table
CREATE TABLE Reserves (
    sid INT,
    bid INT,
    day DATE,
    PRIMARY KEY (sid, bid, day),
    FOREIGN KEY (sid) REFERENCES Sailors(sid),
    FOREIGN KEY (bid) REFERENCES Boats(bid)
);

-- Insert values into the Reserves table
INSERT INTO Reserves (sid, bid, day) VALUES
(22, 101, '1998-10-10'),
(22, 102, '1998-10-10'),
(22, 103, '1998-10-8'),
(22, 104, '1998-10-7'),
(31, 102, '1998-11-10'),
(31, 102, '1998-11-6'),
(31, 104, '1998-11-12'),
(64, 101, '1998-9-5'),
(64, 102, '1998-9-8'),
(74, 103, '1998-9-8');


Write subquery statement for the following queries. 

1. Find all information of sailors who have reserved boat number 101. 

SELECT * 
FROM Sailors 
WHERE sid IN (
    SELECT sid 
    FROM Reserves 
    WHERE bid = 101
);


-- output
sid,sname,rating,age
22,Dustin,7,45
64,Horatio,7,35

2. Find the name of boat reserved by Bob. 

SELECT bname 
FROM Boats 
WHERE bid IN (
    SELECT bid 
    FROM Reserves 
    WHERE sid = (SELECT sid FROM Sailors WHERE sname = 'Bob')
);

-- output
bname


3. Find the names of sailors who have reserved a red boat, and list in the order of age. 

SELECT sname 
FROM Sailors 
WHERE sid IN (
    SELECT sid 
    FROM Reserves 
    WHERE bid IN (SELECT bid FROM Boats WHERE color = 'red')
)
ORDER BY age;


-- output

sname
Horatio
Dustin
Lubber

4. Find the names of sailors who have reserved at least one boat. 

SELECT sname 
FROM Sailors 
WHERE sid IN (
    SELECT DISTINCT sid 
    FROM Reserves
);


-- output

sname
Dustin
Lubber
Horatio
Horatio

5. Find the ids and names of sailors who have reserved two different boats on the same day. 

SELECT sid, sname 
FROM Sailors 
WHERE sid IN (
    SELECT sid 
    FROM Reserves 
    GROUP BY sid, day 
    HAVING COUNT(DISTINCT bid) >= 2
);

- output
sid,sname
22,Dustin

6. Find the ids of sailors who have reserved a red boat or a green boat. 

SELECT DISTINCT sid 
FROM Reserves 
WHERE bid IN (
    SELECT bid 
    FROM Boats 
    WHERE color = 'red' OR color = 'green'
);
 
 
 -- output
 
sid
22
31
64
74

7. Find the name and the age of the youngest sailor. 

SELECT sname, age 
FROM Sailors 
WHERE age = (SELECT MIN(age) FROM Sailors);

-- output
sname,age
Zorba,16

8. Count the number of different sailor names. 

SELECT COUNT(DISTINCT sname) AS unique_sailors
FROM Sailors;

-- output

unique_sailors
9


9. Find the average age of sailors for each rating level. 

SELECT rating, AVG(age) AS avg_age
FROM Sailors
GROUP BY rating;
-- output
rating,avg_age
7,40
1,33
8,40.5
10,25.5
9,40
3,44.5

10. Find the average age of sailors for each rating level that has at least two sailors. 

SELECT rating, AVG(age) AS avg_age
FROM Sailors
GROUP BY rating
HAVING COUNT(*) >= 2;
-- output
rating,avg_age
7,40
8,40.5
10,25.5
3,44.5


-- Question 5

Q5. Consider the following facts and perform the following operations- 
SELECT user FROM mysql.user;
create database Dept;
create database Emp;


--output
user
debian-sys-maint
mysql.infoschema
mysql.session
mysql.sys
root



1. Create user and implement the following commands on relation (Emp and Dept). 

CREATE USER 'VanshSachdeva'@'localhost' IDENTIFIED BY '123456';
--output
user
VanshSachdeva
debian-sys-maint
mysql.infoschema
mysql.session
mysql.sys
root

2. Develop a query to grant all privileges of employees table into departments table. 

GRANT ALL PRIVILEGES ON Emp TO 'VanshSachdeva'@'localhost';
GRANT ALL PRIVILEGES ON Dept TO 'VanshSachdeva'@'localhost';
SHOW GRANTS FOR 'VanshSachdeva'@'localhost';

--output
"Grants for VanshSachdeva@localhost"
"GRANT USAGE ON *.* TO `VanshSachdeva`@`localhost`"
"GRANT UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE VIEW, SHOW VIEW, TRIGGER ON `CDACACTS`.`Dept` TO `VanshSachdeva`@`localhost`"
"GRANT UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE VIEW, SHOW VIEW, TRIGGER ON `CDACACTS`.`Emp` TO `VanshSachdeva`@`localhost`"

3. Develop a query to grant some privileges of employees table into departments table. 

GRANT SELECT, INSERT, UPDATE ON Emp TO 'VanshSachdeva'@'localhost';
GRANT SELECT, INSERT, UPDATE ON Dept TO 'VanshSachdeva'@'localhost';
SHOW GRANTS FOR 'VanshSachdeva'@'localhost';


4. Develop a query to revoke all privileges of employees table from departments table. 

REVOKE ALL PRIVILEGES ON Emp FROM 'VanshSachdeva'@'localhost';
REVOKE ALL PRIVILEGES ON Dept FROM 'VanshSachdeva'@'localhost';
SHOW GRANTS FOR 'VanshSachdeva'@'localhost';


-- output
"Grants for VanshSachdeva@localhost"

5. Develop a query to revoke some privileges of employees table from departments table. 

REVOKE SELECT, INSERT ON Emp FROM 'VanshSachdeva'@'localhost';
REVOKE SELECT, INSERT ON Dept FROM 'VanshSachdeva'@'localhost';
SHOW GRANTS FOR 'VanshSachdeva'@'localhost';

--output
"Grants for VanshSachdeva@localhost"
"GRANT USAGE ON *.* TO `VanshSachdeva`@`localhost`"
"GRANT UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE VIEW, SHOW VIEW, TRIGGER ON `CDACACTS`.`Dept` TO `VanshSachdeva`@`localhost`"
"GRANT UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE VIEW, SHOW VIEW, TRIGGER ON `CDACACTS`.`Emp` TO `VanshSachdeva`@`localhost`"

 
